// woodcutting behavior
const
  // TreePositionsRaw: T2DIntArray = [[3831, 3605], [3820, 3598], [3812, 3586], [3828, 3582], [3836, 3558], [3800, 3567], [3784, 3583], [3772, 3584], [3812, 3631], [3795, 3634], [3776, 3618], [3764, 3614], [3744, 3610], [3788, 3546], [3800, 3541], [3808, 3535], [3844, 3529], [3803, 3517], [3796, 3526], [3783, 3534], [3803, 3526], [3816, 3527], [3827, 3539]];
  TreePositionsRaw: T2DIntArray = [[3831, 3605], [3820, 3598], [3812, 3586], [3828, 3582], [3836, 3558], [3800, 3567], [3784, 3583], [3772, 3584], [3812, 3631], [3795, 3634], [3776, 3618]];
var
  TreePositions: TPointArray;

procedure InitTreePositions();
var
  rawPoin: TIntegerArray;
begin
  for rawPoin in TreePositionsRaw do begin
    TreePositions.Append(Point(rawPoin[0], rawPoin[1]));
  end;
end;

begin
  InitTreePositions();
end;


// works but is very slow
function WoodcuttingBehavior(): Boolean;

  procedure Setup();
  begin
    // keep axe in inv and drop logs/cabbages when appropriate
  end;

  procedure DropItems();
  var
    item: String;
    itemsToDrop: TStringArray = ['Logs'];
    occupiedSlots: TIntArray = [];  // slots occupied by items in itemsToDrop
  begin
    for item in itemsToDrop do begin
      occupiedSlots := Inventory.FindAll(item);
      Inventory.DropItems(occupiedSlots);
    end;
  end;

  procedure Reposition();
  var
    myPos, targetPos, poin: TPoint;
    maxDist: Integer = 20;
  begin
    myPos := Script.Walker.GetMyPos();
    {for poin in TreePositions do begin
      if poin.DistanceTo(myPos) <= maxDist then begin
        Script.Walker.WalkPath([poin]);
        Exit;
      end;
    end;}
    TravelTo(TreePositions[Random(Length(TreePositions))]); // case: farther than maxDist away from any trees
  end;

  function ClickTree(): Boolean;
  var
    atpa:        T2DPointArray;
    tpFiltered:  TPointArray; // filter points to those on mainscreen only
    poin, myPos: TPoint;
    maxDist: Integer = 5;
  begin
    writeln('click tree');
    myPos := Script.Walker.GetMyPos();
    for poin in TreePositions do begin
      if poin.DistanceTo(myPos) <= maxDist then begin
        tpFiltered += poin;
      end;
    end;

    atpa := GetColorsInTiles(TreePositions, C.Tree, 4, [150, 10000], 75);
    Result := TryClickATPA(atpa, ['Tree'], RandomRange(ONE_SECOND, ONE_SECOND*3));

    if Result then begin
      while Minimap.IsPlayerMoving(100) do Wait(Random(50));

      writeln('beginning wait stuff for woodcutting');
      if not XPBar.Find() then while not XPBar.Find() do Wait(50); // if xpbar isnt up, wait until it is
      writeln('xpbar was found!');
    end;

    writeln('done click tree');
  end;

begin
  if Inventory.IsFull() then DropItems();
  Reposition();
  ClickTree();
  Exit(True);
end;
