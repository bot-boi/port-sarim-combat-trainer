// woodcutting behavior
const
  TreePositionsRaw: T2DIntArray = [[3831, 3605], [3820, 3598], [3812, 3586], [3828, 3582], [3836, 3558], [3800, 3567], [3784, 3583], [3772, 3584], [3812, 3631], [3795, 3634], [3776, 3618]];

var
  TreePositions: TPointArray;


procedure InitTreePositions();
var
  rawPoin: TIntegerArray;
begin
  for rawPoin in TreePositionsRaw do begin
    TreePositions.Append(Point(rawPoin[0], rawPoin[1]));
  end;
end;

begin
  InitTreePositions();
end;

var
  burnLogsFlag: Boolean = False; // tells wc behavior if it should be burning wood this tick

function WoodcuttingBehavior(): Boolean;
  procedure BurnLogs();
  var
    slot, tinderBoxSlot, logSlot, logCount: Integer;
    logSlots: TIntArray;
    T: TCountdown;

  begin
    tinderBoxSlot := Inventory.Find('Tinderbox');
    logSlots      := Inventory.FindAll('Logs');
    logCount      := Length(logSlots);

    if logCount <= 0 then begin
      writeln('outta logs!');
      burnLogsFlag := False;
      Exit;
    end;

    logSlot := logSlots[Random(logCount)];

    Inventory.Use(tinderBoxSlot);
    Wait(RandomRange(1000, 3000));   // wait for use animation
    Inventory.MouseSlot(logSlot, mouse_Left);

    Wait(1000, 1500);  // wait for "you attempt to light a fire" text to appear
    T.Init(ONE_SECOND*30);
    while ((not XPBar.Find()) or T.IsFinished()) do begin
      Wait(100, 1000); // if xpbar isnt up, wait until it is
      if (Chatbox.GetLastMessage() = "You can't light a fire here.") then begin // you can't light a fire here
        TravelTo(RandomizePoint(Script.Walker.GetMyPos(), 20)); // move to a pos that (probably) doesnt have a fire
        Break;
      end;
    end;
    Wait(RandomRange(1500, 3000)); // wait for animation and for xpbar to disappear
  end;

  procedure Reposition();
  var
    myPos, targetPos, poin: TPoint;
    maxDist: Integer = 16;
  begin
    myPos := Script.Walker.GetMyPos();
    TravelTo(RandomizePoint(TreePositions[Random(Length(TreePositions))], 6)); // case: farther than maxDist away from any trees
  end;

  function ClickTree(): Boolean;
  var
    atpa:        T2DPointArray;
    tpFiltered:  TPointArray; // filter points to those on mainscreen only
    poin, myPos: TPoint;
    maxDist: Integer = 5;
  begin
    myPos := Script.Walker.GetMyPos();
    for poin in TreePositions do begin
      if poin.DistanceTo(myPos) <= maxDist then begin
        tpFiltered += poin;
      end;
    end;

    atpa := GetColorsInTiles(TreePositions, C.Tree, 4, [150, 10000]);
    Result := TryClickATPA(atpa, ['Tree'], RandomRange(ONE_SECOND, ONE_SECOND*3));

    if Result then begin
      while Minimap.IsPlayerMoving(100) do Wait(Random(50));
      if not XPBar.Find() then while not XPBar.Find() do Wait(50); // if xpbar isnt up, wait until it is
    end;
  end;

begin

  if (Inventory.IsFull() and (Length(Inventory.FindAll('Logs')) > 0)) then burnLogsFlag := True;

  if burnLogsFlag then begin
    BurnLogs();
  end else begin
    Reposition();
    ClickTree();
  end;
  writeln('burnLogsFlag: ' + BoolToStr(burnLogsFlag));
  Exit(True);
end;
