

type                     // flag for certain behaviors that get state-stuck forever
  TState    = (BankRun, BehaviorDone, EatFood, FarmCabbage, FarmGoblin, FarmGull1, FarmGull2, Startup, Travel, Woodcutting);

{$include_once behaviors/behavior.simba}

var
  State: TState = EatFood;
  StateCountdown: TCountdown;

begin
  StateCountdown.Init(RandomRange(ONE_MINUTE*5, ONE_HOUR div 2));
end;

// figures out what the next bot state should be
function NextState(): TState;
var
  combatLvl: Integer;
  pResults: Array of TState;    // possible results

begin
  // combatLvl := Combat.GetCombatLevel();

  if Minimap.GetHPPercent() <= 50 then begin
    writeln('eating food');
    Exit(EatFood);  // eat cabbages until full health
  end else if (Inventory.Count('Cabbage') = 0) and Inventory.IsFull() then begin
    writeln('runnin to bank');
    Exit(BankRun); // if no food and full inv, then need bank
  end else if (Inventory.Count('Cabbage') = 0) then begin
    writeln('farming cabbages');
    Exit(FarmCabbage);
  end;

  if ((Random(100) = 0) and StateCountdown.IsFinished()) or (State = BehaviorDone) then begin

    //if combatLvl > 8 then begin  // should add a bias based on combat lvl instead of just a hard limit
      pResults += FarmGull2;
    //end else begin
      pResults += FarmGoblin;
      pResults += FarmGoblin;
      pResults += FarmGull1;
      pResults += Woodcutting;
    //end;

    Result := pResults[Random(Length(pResults))];
    StateCountdown.Init(RandomRange(ONE_MINUTE*5, ONE_HOUR div 2));
  end else begin
    Result := State;
  end;

end;

// map state to bot behavior (could also be called a task ig)
function GetStateBehavior(state: TState): function: Boolean;
begin
  Result := @Behaviors[state];
end;

// run a behavior based on the current state
procedure RunStateBehavior();
begin
  while GetStateBehavior(State)() do begin
    Script.DoAntiban();
  end;
end;
